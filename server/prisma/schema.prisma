// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-dbml-generator"
}
 

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  BIOLOGIST
  TECHNICIAN
  SECRETARY
}

enum HL7MessageStatus {
  RECEIVED
  PROCESSED
  ERROR
  PENDING_ACK
}

model HL7Message {
  id          String          @id @default(cuid())
  raw         String
  messageType String
  sourceIp    String
  status      HL7MessageStatus
  error       String?
  timestamp   DateTime        @default(now())
  processedAt DateTime?
}

enum DoctorStatus {
  ACTIVE
  INACTIVE
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  VALIDATED
  CANCELLED
}

enum ResultStatus {
  PENDING
  VALIDATED
  REJECTED
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}

enum StockStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  EXPIRED
}

enum SampleType {
  BLOOD
  URINE
  SALIVA
  STOOL
  SPUTUM
  CEREBROSPINAL_FLUID
  SYNOVIAL_FLUID
  PLEURAL_FLUID
  PERITONEAL_FLUID
  OTHER
}

enum TubeType {
  EDTA
  CITRATE
  HEPARIN
  SERUM
  PLAIN
  FLUORIDE
  OTHER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  requests  Request[]
  auditLogs AuditLog[]
  orders    Order[]
  stockOuts StockOut[]
  adjustments InventoryAdjustment[]
  transfers StockTransfer[]
  invoices  Invoice[]
  transactions Transaction[]
  claims    InsuranceClaim[]
}

model Patient {
  id          String   @id @default(cuid())
  externalId  String?  @unique
  firstName   String
  lastName    String
  dateOfBirth DateTime
  gender      String
  phone       String?
  email       String?
  address     String?
  cnssNumber  String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  requests Request[]
  analysisResults AnalysisResult[]
  invoices Invoice[]
}

model Doctor {
  id          String       @id @default(cuid())
  firstName   String
  lastName    String
  email       String       @unique
  phone       String?
  specialty   String?
  orderNumber String?      @unique
  status      DoctorStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  requests Request[]
}

model Backup {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  filename    String
  status      String   // PENDING, IN_PROGRESS, COMPLETED, FAILED
  size        Int
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        String   @default("MANUAL") // MANUAL, AUTOMATIC
  description String?
}

model BackupSettings {
  id                  String   @id @default(cuid())
  autoBackupEnabled   Boolean  @default(false)
  backupFrequency     String   @default("WEEKLY") // DAILY, WEEKLY, MONTHLY
  retentionDays       Int      @default(30)
  includeFiles        Boolean  @default(true)
  compressionEnabled  Boolean  @default(true)
  encryptionEnabled   Boolean  @default(false)
  lastBackupDate      DateTime?
  nextScheduledBackup DateTime?
  cronJobId           String?  // Store cron job ID for management
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("backup_settings")
}

model AuditLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  userId    String
  action    String
  details   String
  ipAddress String?
  
  // Relations
  user      User     @relation(fields: [userId], references: [id])
}

model Plugin {
  id          String   @id @default(cuid())
  name        String
  version     String
  description String
  installed   Boolean  @default(false)
  enabled     Boolean  @default(false)
  installedAt DateTime?
  updatedAt   DateTime?
}

model Analysis {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  category    String
  price       Float    @default(0)
  tva         Float    @default(20)
  cost        Float    @default(0)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  requestAnalyses RequestAnalysis[]
  results         Result[]
  invoiceItems    InvoiceItem[]
}

model Request {
  id              String        @id @default(cuid())
  patientId       String
  doctorId        String?
  status          RequestStatus @default(PENDING)
  priority        String        @default("NORMAL")
  sampleType      SampleType    @default(BLOOD)
  tubeType        TubeType?
  collectionDate  DateTime?
  collectionTime  String?
  notes           String?
  totalAmount     Float         @default(0)
  discount        Float         @default(0)
  advancePayment  Float         @default(0)
  amountDue       Float         @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  createdById     String

  // Relations
  patient         Patient         @relation(fields: [patientId], references: [id])
  doctor          Doctor?         @relation(fields: [doctorId], references: [id])
  createdBy       User            @relation(fields: [createdById], references: [id])
  requestAnalyses RequestAnalysis[]
  results         Result[]
  invoices        Invoice[]
}

model RequestAnalysis {
  id         String @id @default(cuid())
  requestId  String
  analysisId String
  price      Float  @default(0)
  tva        Float  @default(0)

  // Relations
  request  Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  analysis Analysis @relation(fields: [analysisId], references: [id])

  @@unique([requestId, analysisId])
}

model Result {
  id         String       @id @default(cuid())
  requestId  String
  analysisId String
  value      String?
  unit       String?
  reference  String?
  status     ResultStatus @default(PENDING)
  notes      String?
  validatedBy String?
  validatedAt DateTime?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  request  Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  analysis Analysis @relation(fields: [analysisId], references: [id])
}

model AnalysisResult {
  id         String   @id @default(cuid())
  patientId  String
  result     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  patient    Patient  @relation(fields: [patientId], references: [id])
}

model SystemConfig {
  id                    String   @id @default(cuid())
  // Laboratory Information
  labName               String   @default("SIL Laboratory")
  labCode               String?  @unique
  address               String   @default("123 Main Street, City, Country")
  phone                 String   @default("+1234567890")
  email                 String   @default("info@sil.lab")
  website               String?
  fax                   String?
  
  // Director/Manager Information
  directorName          String?
  directorTitle         String?
  directorSignature     String? // Base64 encoded signature image
  
  // Laboratory Accreditation
  accreditationNumber   String?
  accreditationBody     String?
  accreditationExpiry   DateTime?
  licenseNumber         String?
  
  // Currency & Financial Settings
  currencySymbol        String   @default("â‚¬")
  currencyCode          String   @default("EUR")
  currencyPosition      String   @default("AFTER") // BEFORE or AFTER
  decimalPlaces         Int      @default(2)
  taxRate               Float    @default(20.0)
  
  // Print Settings
  autoprint             Boolean  @default(true)
  defaultPrinter        String?
  printLogo             Boolean  @default(true)
  logoUrl               String?
  reportHeader          String?
  reportFooter          String?
  
  // Notification Settings
  smsNotifications      Boolean  @default(true)
  emailNotifications    Boolean  @default(true)
  smsProvider           String?
  smsApiKey             String?
  emailProvider         String?
  emailApiKey           String?
  
  // System Settings
  language              String   @default("en")
  timezone              String   @default("UTC")
  dateFormat            String   @default("DD/MM/YYYY")
  timeFormat            String   @default("24h")
  
  // Quality Control Settings
  qcEnabled             Boolean  @default(true)
  qcFrequency           String   @default("DAILY") // DAILY, WEEKLY, MONTHLY
  qcRetentionDays       Int      @default(365)
  
  // Backup Settings
  autoBackup            Boolean  @default(false)
  backupFrequency       String   @default("WEEKLY")
  backupRetentionDays   Int      @default(30)
  
  // Security Settings
  sessionTimeout        Int      @default(30) // minutes
  passwordExpiry        Int      @default(90) // days
  maxLoginAttempts      Int      @default(5)
  
  // Integration Settings
  hl7Enabled            Boolean  @default(false)
  hl7Port               Int      @default(2575)
  lisIntegration        Boolean  @default(false)
  
  // Custom Fields (JSON)
  customSettings        String?  // JSON string for additional custom settings
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("system_config")
}

model Product {
  id            String      @id @default(cuid())
  name          String
  code          String      @unique
  category      String
  description   String?
  unit          String      @default("pcs")
  minStock      Int         @default(0)
  maxStock      Int?
  hasExpiryDate Boolean     @default(true)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  stockEntries StockEntry[]
  stockOuts    StockOut[]
  transfers    StockTransfer[]
  adjustments  InventoryAdjustment[]
  orderItems   OrderItem[]
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  email       String?
  phone       String?
  address     String?
  contactPerson String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  stockEntries StockEntry[]
  orders       Order[]
}

model StockEntry {
  id          String   @id @default(cuid())
  productId   String
  supplierId  String?
  quantity    Int
  lotNumber   String?
  expiryDate  DateTime?
  unitCost    Float    @default(0)
  location    String   @default("Main Storage")
  notes       String?
  receivedBy  String?
  receivedAt  DateTime @default(now())

  // Relations
  product  Product  @relation(fields: [productId], references: [id])
  supplier Supplier? @relation(fields: [supplierId], references: [id])
}

model StockOut {
  id          String   @id @default(cuid())
  productId   String
  quantity    Int
  usedBy      String?
  department  String?
  purpose     String?
  notes       String?
  usedAt      DateTime @default(now())
  userId      String?

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model StockTransfer {
  id            String   @id @default(cuid())
  productId     String
  fromLocation  String
  toLocation    String
  quantity      Int
  transferredBy String?
  notes         String?
  transferredAt DateTime @default(now())
  userId        String?

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model InventoryAdjustment {
  id          String   @id @default(cuid())
  productId   String
  oldQuantity Int
  newQuantity Int
  difference  Int
  reason      String
  notes       String?
  adjustedBy  String?
  adjustedAt  DateTime @default(now())
  userId      String?

  // Relations
  product Product @relation(fields: [productId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
}

model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  supplierId    String
  status        OrderStatus   @default(DRAFT)
  orderDate     DateTime      @default(now())
  expectedDate  DateTime?
  totalAmount   Float         @default(0)
  notes         String?
  createdBy     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  supplier   Supplier     @relation(fields: [supplierId], references: [id])
  user       User?        @relation(fields: [createdBy], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  productId String
  quantity Int
  unitPrice Float @default(0)
  totalPrice Float @default(0)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Automate {
  id          String   @id @default(cuid())
  name        String
  type        String   // e.g., Immunoassay, Hematology, Biochemistry
  manufacturer String
  protocol    String   // ASTM, HL7, LIS2-A2
  connection  String   // tcp, serial, ftp
  config      Json
  enabled     Boolean  @default(true)
  status      String   @default("offline") // online, offline, error
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  driverCodes AutomateCodeMapping[]
  transferLogs AutomateTransferLog[]
  qcResults QualityControlResult[]
}

model AutomateCodeMapping {
  id             String   @id @default(cuid())
  automateId     String
  codeAutomate   String
  silTestName    String
  sampleType     String
  unit           String?
  refRangeLow    Float?
  refRangeHigh   Float?
  createdAt      DateTime @default(now())

  // Relations
  automate Automate @relation(fields: [automateId], references: [id], onDelete: Cascade)
}

model AutomateTransferLog {
  id          String   @id @default(cuid())
  automateId  String
  type        String   // 'result' | 'worklist'
  status      String   // success | failed
  duration    Int?     // in ms
  errorMsg    String?
  timestamp   DateTime @default(now())

  // Relations
  automate Automate @relation(fields: [automateId], references: [id], onDelete: Cascade)
}

model QualityControlResult {
  id          String   @id @default(cuid())
  automateId  String
  testName    String
  level       String   // Low, Normal, High
  value       Float
  expected    Float
  deviation   Float
  status      String   // pass, fail, warning
  timestamp   DateTime @default(now())

  // Relations
  automate Automate @relation(fields: [automateId], references: [id], onDelete: Cascade)
}

// Module License Management
enum ModuleStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  TRIAL
}

model Module {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String
  version     String
  author      String   @default("SIL Lab Systems")
  category    String   // stock, billing, analytics, etc.
  price       Float    @default(0)
  features    Json     // Array of features
  requirements Json    // System requirements
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  licenses ModuleLicense[]
}

model ModuleLicense {
  id            String       @id @default(cuid())
  moduleId      String
  licenseKey    String       @unique
  organizationName String?
  contactEmail  String?
  status        ModuleStatus @default(TRIAL)
  activatedAt   DateTime?
  expiresAt     DateTime
  maxUsers      Int          @default(1)
  features      Json?        // Specific features enabled
  metadata      Json?        // Additional license data
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

// ============================================================================
// BILLING MANAGER MODULE SCHEMA
// ============================================================================

enum InvoiceType {
  STANDARD
  PROFORMA
  CREDIT_NOTE
  DEBIT_NOTE
  RECEIPT
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  PARTIAL_PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CHECK
  CREDIT_CARD
  DEBIT_CARD
  INSURANCE_DIRECT
}

enum TransactionType {
  PAYMENT
  REFUND
  ADJUSTMENT
  DISCOUNT
  TAX_ADJUSTMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TaxType {
  TVA
  STAMP_TAX
  WITHHOLDING_TAX
  OTHER
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  REJECTED
  PAID
}

// Customer/Payer Management
model Customer {
  id                String   @id @default(cuid())
  type              String   // INDIVIDUAL, INSURANCE, COMPANY
  name              String
  email             String?
  phone             String?
  address           String?
  city              String?
  postalCode        String?
  country           String   @default("Morocco")
  
  // Tax Information
  taxId             String?  // ICE number for Morocco
  vatNumber         String?
  
  // Insurance specific fields
  insuranceCode     String?
  contractNumber    String?
  coveragePercentage Float?  @default(0)
  
  // Credit terms
  creditLimit       Float    @default(0)
  paymentTerms      Int      @default(30) // days
  
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  invoices          Invoice[]
  transactions      Transaction[]
  claims            InsuranceClaim[]
}

// Invoice Management
model Invoice {
  id                String        @id @default(cuid())
  invoiceNumber     String        @unique
  type              InvoiceType   @default(STANDARD)
  status            InvoiceStatus @default(DRAFT)
  
  // Customer Information
  customerId        String
  customerName      String        // Cached for performance
  customerAddress   String?
  customerTaxId     String?
  
  // Request/Patient Information
  requestId         String?
  patientId         String?
  patientName       String?
  
  // Financial Information
  subtotal          Float         @default(0)
  discountAmount    Float         @default(0)
  discountPercent   Float         @default(0)
  taxAmount         Float         @default(0)
  stampTaxAmount    Float         @default(0)
  totalAmount       Float         @default(0)
  paidAmount        Float         @default(0)
  balanceAmount     Float         @default(0)
  
  // Currency
  currency          String        @default("MAD")
  exchangeRate      Float         @default(1)
  
  // Dates
  issueDate         DateTime      @default(now())
  dueDate           DateTime
  paidDate          DateTime?
  
  // Recurrence
  recurrenceType    RecurrenceType @default(NONE)
  recurrenceEnd     DateTime?
  parentInvoiceId   String?
  
  // Additional Information
  notes             String?
  internalNotes     String?
  terms             String?
  
  // System fields
  createdById       String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  customer          Customer      @relation(fields: [customerId], references: [id])
  request           Request?      @relation(fields: [requestId], references: [id])
  patient           Patient?      @relation(fields: [patientId], references: [id])
  createdBy         User          @relation(fields: [createdById], references: [id])
  items             InvoiceItem[]
  taxes             InvoiceTax[]
  transactions      Transaction[]
  parentInvoice     Invoice?      @relation("InvoiceRecurrence", fields: [parentInvoiceId], references: [id])
  childInvoices     Invoice[]     @relation("InvoiceRecurrence")
  claims            InsuranceClaim[]
  reminders         PaymentReminder[]
}

// Invoice Line Items
model InvoiceItem {
  id                String   @id @default(cuid())
  invoiceId         String
  
  // Item Information
  analysisId        String?
  description       String
  quantity          Float    @default(1)
  unitPrice         Float
  discount          Float    @default(0)
  taxRate           Float    @default(20) // TVA rate
  lineTotal         Float
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  invoice           Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  analysis          Analysis? @relation(fields: [analysisId], references: [id])
}

// Tax Management
model InvoiceTax {
  id                String   @id @default(cuid())
  invoiceId         String
  taxType           TaxType
  taxName           String
  taxRate           Float
  taxableAmount     Float
  taxAmount         Float
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  invoice           Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

// Payment Transactions
model Transaction {
  id                String            @id @default(cuid())
  transactionNumber String            @unique
  type              TransactionType
  status            TransactionStatus @default(PENDING)
  
  // Financial Information
  amount            Float
  currency          String            @default("MAD")
  exchangeRate      Float             @default(1)
  
  // Payment Information
  paymentMethod     PaymentMethod
  paymentReference  String?           // Check number, transfer reference, etc.
  paymentDate       DateTime          @default(now())
  
  // Related Records
  invoiceId         String?
  customerId        String
  
  // Additional Information
  description       String?
  notes             String?
  
  // System fields
  processedById     String
  processedAt       DateTime          @default(now())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  invoice           Invoice?          @relation(fields: [invoiceId], references: [id])
  customer          Customer          @relation(fields: [customerId], references: [id])
  processedBy       User              @relation(fields: [processedById], references: [id])
}

// Insurance Claims
model InsuranceClaim {
  id                String      @id @default(cuid())
  claimNumber       String      @unique
  status            ClaimStatus @default(DRAFT)
  
  // Insurance Information
  customerId        String
  insuranceCode     String
  contractNumber    String?
  
  // Claim Information
  invoiceId         String
  claimAmount       Float
  approvedAmount    Float?
  rejectionReason   String?
  
  // Dates
  submittedDate     DateTime?
  approvedDate      DateTime?
  paidDate          DateTime?
  
  // Documents
  documents         Json?             // Array of document URLs
  
  // System fields
  createdById       String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  customer          Customer          @relation(fields: [customerId], references: [id])
  invoice           Invoice           @relation(fields: [invoiceId], references: [id])
  createdBy         User              @relation(fields: [createdById], references: [id])
}

// Payment Reminders
model PaymentReminder {
  id                String   @id @default(cuid())
  invoiceId         String
  reminderLevel     Int      // 1, 2, 3 for escalation
  sentDate          DateTime @default(now())
  dueDate           DateTime
  amount            Float
  method            String   // EMAIL, SMS, LETTER
  status            String   // SENT, DELIVERED, FAILED
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  invoice           Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

// Financial Reports Cache
model FinancialReport {
  id                String   @id @default(cuid())
  reportType        String   // DAILY, WEEKLY, MONTHLY, YEARLY
  reportDate        DateTime
  periodStart       DateTime
  periodEnd         DateTime
  
  // Metrics
  totalRevenue      Float    @default(0)
  totalPaid         Float    @default(0)
  totalOutstanding  Float    @default(0)
  totalOverdue      Float    @default(0)
  
  // Additional data
  reportData        Json     // Detailed report data
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([reportType, reportDate])
}

// Tax Configuration
model TaxConfiguration {
  id                String   @id @default(cuid())
  taxType           TaxType
  taxName           String
  taxRate           Float
  isActive          Boolean  @default(true)
  effectiveFrom     DateTime @default(now())
  effectiveTo       DateTime?
  
  // Moroccan specific
  isDefault         Boolean  @default(false)
  applicableToServices Boolean @default(true)
  applicableToProducts Boolean @default(true)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}