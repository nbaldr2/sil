import React, { useState } from 'react';
import { useAuth } from '../App';
import { generateResultPDF, generatePDFFromElement } from '../utils/pdfGenerator';

interface Result {
  id: string;
  value: string | null;
  unit: string | null;
  reference: string | null;
  status: string;
  notes: string | null;
  analysis: {
    id: string;
    name: string;
    code: string;
    category: string;
  };
}

interface Request {
  id: string;
  status: string;
  createdAt: string;
  patient: {
    id: string;
    firstName: string;
    lastName: string;
    dateOfBirth: string;
    cnssNumber?: string;
    gender: string;
  };
  doctor?: {
    firstName: string;
    lastName: string;
    specialty?: string;
  };
  requestAnalyses: Array<{
    analysis: {
      id: string;
      name: string;
      code: string;
    };
  }>;
  results?: Result[];
}

interface ResultReportProps {
  request: Request;
  onClose: () => void;
}

export default function ResultReport({ request, onClose }: ResultReportProps) {
  const { language } = useAuth();
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  const t = {
    fr: {
      labName: 'Laboratoire SIL',
      labAddress: '123 Rue de la Santé, Casablanca, Maroc',
      labPhone: 'Tél: +212 5 22 123 456',
      labEmail: 'Email: contact@sil-lab.ma',
      reportTitle: 'RAPPORT D\'ANALYSES MÉDICALES',
      patientInfo: 'INFORMATIONS PATIENT',
      doctorInfo: 'MÉDECIN PRESCRIPTEUR',
      requestInfo: 'INFORMATIONS DEMANDE',
      analysisResults: 'RÉSULTATS D\'ANALYSES',
      patientName: 'Nom du patient',
      patientId: 'ID Patient',
      dateOfBirth: 'Date de naissance',
      gender: 'Sexe',
      cnssNumber: 'Numéro CNSS',
      doctorName: 'Nom du médecin',
      specialty: 'Spécialité',
      requestId: 'ID Demande',
      requestDate: 'Date de demande',
      analysisName: 'Analyse',
      result: 'Résultat',
      unit: 'Unité',
      reference: 'Valeurs de référence',
      status: 'Statut',
      notes: 'Notes',
      normal: 'Normal',
      abnormal: 'Anormal',
      pending: 'En attente',
      validated: 'Validé',
      completed: 'Terminé',
      reportDate: 'Date du rapport',
      validatedBy: 'Validé par',
      signature: 'Signature',
      disclaimer: 'Ce rapport est généré automatiquement par le système SIL. Pour toute question, veuillez contacter le laboratoire.',
      print: 'Imprimer',
      close: 'Fermer'
    },
    en: {
      labName: 'SIL Laboratory',
      labAddress: '123 Health Street, Casablanca, Morocco',
      labPhone: 'Phone: +212 5 22 123 456',
      labEmail: 'Email: contact@sil-lab.ma',
      reportTitle: 'MEDICAL ANALYSIS REPORT',
      patientInfo: 'PATIENT INFORMATION',
      doctorInfo: 'PRESCRIBING DOCTOR',
      requestInfo: 'REQUEST INFORMATION',
      analysisResults: 'ANALYSIS RESULTS',
      patientName: 'Patient Name',
      patientId: 'Patient ID',
      dateOfBirth: 'Date of Birth',
      gender: 'Gender',
      cnssNumber: 'CNSS Number',
      doctorName: 'Doctor Name',
      specialty: 'Specialty',
      requestId: 'Request ID',
      requestDate: 'Request Date',
      analysisName: 'Analysis',
      result: 'Result',
      unit: 'Unit',
      reference: 'Reference Values',
      status: 'Status',
      notes: 'Notes',
      normal: 'Normal',
      abnormal: 'Abnormal',
      pending: 'Pending',
      validated: 'Validated',
      completed: 'Completed',
      reportDate: 'Report Date',
      validatedBy: 'Validated by',
      signature: 'Signature',
      disclaimer: 'This report is automatically generated by the SIL system. For any questions, please contact the laboratory.',
      print: 'Print',
      close: 'Close'
    }
  }[language];

  const getStatusText = (status: string) => {
    switch (status) {
      case 'VALIDATED': return t.validated;
      case 'COMPLETED': return t.completed;
      case 'PENDING': return t.pending;
      default: return status;
    }
  };

  const getStatusClass = (status: string) => {
    switch (status) {
      case 'VALIDATED': return 'text-green-600';
      case 'COMPLETED': return 'text-blue-600';
      case 'PENDING': return 'text-yellow-600';
      default: return 'text-gray-600';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString(language === 'fr' ? 'fr-FR' : 'en-US');
  };

  const handlePrint = () => {
    window.print();
  };

  const handleGeneratePDF = async () => {
    try {
      setIsGeneratingPDF(true);
      await generateResultPDF(request, language);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert(language === 'fr' ? 'Erreur lors de la génération du PDF' : 'Error generating PDF');
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  const handleGeneratePDFFromView = async () => {
    try {
      setIsGeneratingPDF(true);
      const patientName = `${request.patient.firstName}_${request.patient.lastName}`.replace(/\s+/g, '_');
      const date = new Date().toISOString().split('T')[0];
      const filename = `Result_Report_${patientName}_${date}.pdf`;
      
      await generatePDFFromElement('result-report-content', filename);
    } catch (error) {
      console.error('Error generating PDF from view:', error);
      alert(language === 'fr' ? 'Erreur lors de la génération du PDF' : 'Error generating PDF');
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 print-container">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto print-container">
        {/* Header */}
        <div className="p-6 border-b border-gray-200 flex justify-between items-center no-print">
          <h2 className="text-xl font-semibold text-gray-900">{t.reportTitle}</h2>
          <div className="flex space-x-2">
            <button
              onClick={handleGeneratePDF}
              disabled={isGeneratingPDF}
              className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
            >
              {isGeneratingPDF ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>{language === 'fr' ? 'Génération...' : 'Generating...'}</span>
                </>
              ) : (
                <>
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  <span>{language === 'fr' ? 'Générer PDF' : 'Generate PDF'}</span>
                </>
              )}
            </button>
            <button
              onClick={handlePrint}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
            >
              {t.print}
            </button>
            <button
              onClick={onClose}
              className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
            >
              {t.close}
            </button>
          </div>
        </div>

        {/* Report Content */}
        <div id="result-report-content" className="p-6 print:p-0">
          {/* Lab Header */}
          <div className="text-center mb-8 print:mb-4">
            <h1 className="text-2xl font-bold text-gray-900 mb-2">{t.labName}</h1>
            <p className="text-gray-600">{t.labAddress}</p>
            <p className="text-gray-600">{t.labPhone}</p>
            <p className="text-gray-600">{t.labEmail}</p>
          </div>

          {/* Patient and Doctor Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8 print:mb-4">
            {/* Patient Info */}
            <div className="border border-gray-200 rounded-lg p-4">
              <h3 className="font-semibold text-gray-900 mb-3">{t.patientInfo}</h3>
              <div className="space-y-2 text-sm">
                <div>
                  <span className="font-medium">{t.patientName}:</span>
                  <span className="ml-2">{request.patient.firstName} {request.patient.lastName}</span>
                </div>
                <div>
                  <span className="font-medium">{t.patientId}:</span>
                  <span className="ml-2">{request.patient.id}</span>
                </div>
                <div>
                  <span className="font-medium">{t.dateOfBirth}:</span>
                  <span className="ml-2">{formatDate(request.patient.dateOfBirth)}</span>
                </div>
                <div>
                  <span className="font-medium">{t.gender}:</span>
                  <span className="ml-2">{request.patient.gender}</span>
                </div>
                {request.patient.cnssNumber && (
                  <div>
                    <span className="font-medium">{t.cnssNumber}:</span>
                    <span className="ml-2">{request.patient.cnssNumber}</span>
                  </div>
                )}
              </div>
            </div>

            {/* Doctor Info */}
            <div className="border border-gray-200 rounded-lg p-4">
              <h3 className="font-semibold text-gray-900 mb-3">{t.doctorInfo}</h3>
              <div className="space-y-2 text-sm">
                <div>
                  <span className="font-medium">{t.doctorName}:</span>
                  <span className="ml-2">
                    {request.doctor ? `Dr. ${request.doctor.firstName} ${request.doctor.lastName}` : 'N/A'}
                  </span>
                </div>
                {request.doctor?.specialty && (
                  <div>
                    <span className="font-medium">{t.specialty}:</span>
                    <span className="ml-2">{request.doctor.specialty}</span>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Request Information */}
          <div className="border border-gray-200 rounded-lg p-4 mb-8 print:mb-4">
            <h3 className="font-semibold text-gray-900 mb-3">{t.requestInfo}</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div>
                <span className="font-medium">{t.requestId}:</span>
                <span className="ml-2 font-mono">{request.id}</span>
              </div>
              <div>
                <span className="font-medium">{t.requestDate}:</span>
                <span className="ml-2">{formatDate(request.createdAt)}</span>
              </div>
              <div>
                <span className="font-medium">{t.reportDate}:</span>
                <span className="ml-2">{formatDate(new Date().toISOString())}</span>
              </div>
            </div>
          </div>

          {/* Analysis Results */}
          <div className="mb-8 print:mb-4">
            <h3 className="font-semibold text-gray-900 mb-4">{t.analysisResults}</h3>
            <div className="overflow-x-auto">
              <table className="min-w-full border border-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="border border-gray-200 px-4 py-2 text-left text-sm font-medium text-gray-900">
                      {t.analysisName}
                    </th>
                    <th className="border border-gray-200 px-4 py-2 text-left text-sm font-medium text-gray-900">
                      {t.result}
                    </th>
                    <th className="border border-gray-200 px-4 py-2 text-left text-sm font-medium text-gray-900">
                      {t.unit}
                    </th>
                    <th className="border border-gray-200 px-4 py-2 text-left text-sm font-medium text-gray-900">
                      {t.reference}
                    </th>
                    <th className="border border-gray-200 px-4 py-2 text-left text-sm font-medium text-gray-900">
                      {t.status}
                    </th>
                    <th className="border border-gray-200 px-4 py-2 text-left text-sm font-medium text-gray-900">
                      {t.notes}
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {request.results && request.results.length > 0 ? (
                    request.results.map((result) => (
                      <tr key={result.id}>
                        <td className="border border-gray-200 px-4 py-2 text-sm">
                          {result.analysis.name}
                        </td>
                        <td className="border border-gray-200 px-4 py-2 text-sm font-medium">
                          {result.value || '-'}
                        </td>
                        <td className="border border-gray-200 px-4 py-2 text-sm">
                          {result.unit || '-'}
                        </td>
                        <td className="border border-gray-200 px-4 py-2 text-sm">
                          {result.reference || '-'}
                        </td>
                        <td className="border border-gray-200 px-4 py-2 text-sm">
                          <span className={getStatusClass(result.status)}>
                            {getStatusText(result.status)}
                          </span>
                        </td>
                        <td className="border border-gray-200 px-4 py-2 text-sm">
                          {result.notes || '-'}
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan={6} className="border border-gray-200 px-4 py-4 text-center text-gray-500">
                        {language === 'fr' ? 'Aucun résultat disponible' : 'No results available'}
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>

          {/* Footer */}
          <div className="border-t border-gray-200 pt-6 print:pt-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <p className="text-sm text-gray-600 mb-2">{t.validatedBy}:</p>
                <div className="border-t-2 border-gray-400 w-32 pt-2">
                  <p className="text-sm font-medium">Dr. Biologist</p>
                </div>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-600 mb-2">{t.signature}:</p>
                <div className="border-t-2 border-gray-400 w-32 ml-auto pt-2">
                  <p className="text-sm font-medium">Lab Director</p>
                </div>
              </div>
            </div>
            <div className="mt-6 print:mt-4 text-center">
              <p className="text-xs text-gray-500">{t.disclaimer}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
} 